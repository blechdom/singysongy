[{"/var/singysongy/singysongy/client/src/index.tsx":"1","/var/singysongy/singysongy/client/src/serviceWorker.js":"2","/var/singysongy/singysongy/client/src/reportWebVitals.ts":"3","/var/singysongy/singysongy/client/src/Components/App/App.tsx":"4","/var/singysongy/singysongy/client/src/Components/Appbar/Appbar.tsx":"5","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/VideoChatEffects.tsx":"6","/var/singysongy/singysongy/client/src/Components/Home/Home.tsx":"7","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/audioUtils.ts":"8","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/reverb.js":"9","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/jungle.js":"10","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/VideoCard.tsx":"11","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/constants.tsx":"12","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/SocketsAndPeers.tsx":"13","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/eq.js":"14","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/compressor.js":"15"},{"size":1305,"mtime":1618768773249,"results":"16","hashOfConfig":"17"},{"size":5353,"mtime":1618768773249,"results":"18","hashOfConfig":"17"},{"size":425,"mtime":1618768763485,"results":"19","hashOfConfig":"17"},{"size":339,"mtime":1618768763481,"results":"20","hashOfConfig":"17"},{"size":2964,"mtime":1618770986856,"results":"21","hashOfConfig":"17"},{"size":29750,"mtime":1618771336673,"results":"22","hashOfConfig":"17"},{"size":1287,"mtime":1618770940303,"results":"23","hashOfConfig":"17"},{"size":423,"mtime":1618768773249,"results":"24","hashOfConfig":"17"},{"size":1331,"mtime":1618771334493,"results":"25","hashOfConfig":"17"},{"size":7467,"mtime":1618771332453,"results":"26","hashOfConfig":"17"},{"size":1386,"mtime":1618768773249,"results":"27","hashOfConfig":"17"},{"size":1940,"mtime":1618771040720,"results":"28","hashOfConfig":"17"},{"size":2292,"mtime":1618768773249,"results":"29","hashOfConfig":"17"},{"size":1235,"mtime":1618771330673,"results":"30","hashOfConfig":"17"},{"size":1671,"mtime":1618771328917,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"xc703w",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/singysongy/singysongy/client/src/index.tsx",[],["68","69"],"/var/singysongy/singysongy/client/src/serviceWorker.js",[],["70","71"],"/var/singysongy/singysongy/client/src/reportWebVitals.ts",[],"/var/singysongy/singysongy/client/src/Components/App/App.tsx",[],"/var/singysongy/singysongy/client/src/Components/Appbar/Appbar.tsx",[],"/var/singysongy/singysongy/client/src/Components/VideoChatEffects/VideoChatEffects.tsx",["72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"import React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport GraphicEq from '@material-ui/icons/GraphicEq';\n//import GraphicEq from '@material-ui/icons/GraphicEq';\nimport Slider from '@material-ui/core/Slider';\nimport SocketsAndPeers from './SocketsAndPeers';\nimport { USER_MEDIA_CONSTRAINTS, REVERB_PRESET_LIST } from './constants';\nimport Jungle from './jungle.js';\nimport Reverb from './reverb.js';\nimport Equalizer from './eq.js';\nimport Compressor from './compressor.js';\nimport VideoCard from './VideoCard';\nimport './VideoChat.css';\nimport { mixAudioTracks } from './audioUtils.ts';\n\nconst drawerWidth = 350;\n\nconst useStyles = makeStyles((theme) => ({\n  videoRoot: {\n    flexGrow: 1,\n  },\n  root: {\n    display: 'flex',\n  },\n  settingsButton: {\n    position: 'absolute',\n    right: '20px',\n    top: '10px', \n  },\n  title: {\n    flexGrow: 1,\n    align: 'center',\n    fontWeight: 600, \n    lineHeight: 1\n  },\n  slider: {\n    width: 270,\n    align: 'center',\n    left: '40px'\n  },\n  switch: {\n    align: 'center',\n    left: '40px'\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  drawerBody: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1),\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginRight: 0,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginRight: +drawerWidth,\n  },\n  select: {\n    minWidth: 240,\n    paddingLeft: theme.spacing(4)\n  },\n}));\n\nexport default function VideoChatEffects() {\n  const AudioContext = window.AudioContext || window.webkitAudioContext;\n  \n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [monitor, setMonitor] = React.useState<boolean>(false);\n  const [monitorGain, setMonitorGain] = React.useState<number>(0);\n  const [videoList, setVideoList] = React.useState([]);\n  const [socketComponent, setSocketComponent] = React.useState([]);\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [laughSoundBuffer, setLaughSoundBuffer] = useState(null);\n  const [noooSoundBuffer, setNoooSoundBuffer] = useState(null);\n  const [whistleSoundBuffer, setWhistleSoundBuffer] = useState(null);\n  const [hornSoundBuffer, setHornSoundBuffer] = useState(null);\n  const [eq, setEq] = useState(false);\n  const [comp, setComp] = useState(false);\n  const [pitchShift, setPitchShift] = useState(false);\n  const [pitchOffsetAmount, setPitchOffsetAmount] = useState(0);\n  const [reverb, setReverb] = useState(false);\n  const [reverbWetGain, setReverbWetGain] = useState(0.5);\n  const [reverbDryGain, setReverbDryGain] = useState(0.5);\n  const [reverbPreset, setReverbPreset] = useState('MediumHall');\n  const [pitchShiftWetGain, setPitchShiftWetGain] = useState(0.99);\n  const [pitchShiftDryGain, setPitchShiftDryGain] = useState(0);\n  const [samples, setSamples] = useState(false);\n  const [samplesGainValue, setSamplesGainValue] = useState(0);\n\n  const [compressorWetGain, setCompressorWetGain] = useState(0.5);\n  const [compressorDryGain, setCompressorDryGain] = useState(0.5);\n  const [compressorThreshold, setCompressorThreshold] = useState(-50);\n  const [compressorKnee, setCompressorKnee] = useState(40);\n  const [compressorRatio, setCompressorRatio] = useState(12);\n  const [compressorAttack, setCompressorAttack] = useState(0.003);\n  const [compressorRelease, setCompressorRelease] = useState(0.25);\n  const [lowEQGain, setLowEQGain] = useState(0);\n  const [lowMidEQGain, setLowMidEQGain] = useState(0);\n  const [midEQGain, setMidEQGain] = useState(0);\n  const [highMidEQGain, setHighMidEQGain] = useState(0);\n  const [highEQGain, setHighEQGain] = useState(0);\n  const [highEQFilter, setHighEQFilter] = useState(0);\n  const [lowEQSlider, setLowEQSlider] = useState(0);\n  const [lowMidEQSlider, setLowMidEQSlider] = useState(0);\n  const [midEQSlider, setMidEQSlider] = useState(0);\n  const [highMidEQSlider, setHighMidEQSlider] = useState(0);\n  const [highEQSlider, setHighEQSlider] = useState(0);\n\n      //lowEQFilter: null,\n      //lowMidEQFilter: null,\n      //midEQFilter: null,\n      //highMidEQFilter: null,\n\n  let input = useRef(null);\n  let equalizer = useRef(null);\n  let compressor = useRef(null);\n  let pitchShifter = useRef(null);\n  let reverberator = useRef(null);\n  let localStream = useRef(null);\n  let samplesGain = useRef(null);\n  let samplesDestination = useRef(null);\n  let remoteAudioDestination = useRef(null);\n  let localOutputVolume = useRef(null);\n  let eqToCompressorPassthrough = useRef(null);\n  let compressorToPitchshiftPassthrough = useRef(null);\n  let pitchshiftToReverbPassthrough = useRef(null);\n\n  useEffect(() => {\n    if(audioCtx === null){\n      setAudioCtx(new AudioContext());\n    }\n    return () => { \n      setAudioCtx(null);\n    };\n  }, []);\n\n  useEffect(() => {\n    if(audioCtx !== null){\n      samplesDestination.current = audioCtx.createMediaStreamDestination();\n      remoteAudioDestination.current = audioCtx.createMediaStreamDestination();\n      localOutputVolume.current = audioCtx.createGain();\n      localOutputVolume.current.gain.value = monitorGain;\n      eqToCompressorPassthrough.current = audioCtx.createGain();\n      compressorToPitchshiftPassthrough.current = audioCtx.createGain();\n      pitchshiftToReverbPassthrough.current = audioCtx.createGain();\n      samplesGain.current = audioCtx.createGain();\n      samplesGain.current.gain.value = samplesGainValue;\n      samplesGain.current.connect(samplesDestination.current);\n      samplesGain.current.connect(localOutputVolume.current);\n\n      initSamples();\n\n      if ( userMediaAvailable() ) {\n        navigator.mediaDevices.getUserMedia(USER_MEDIA_CONSTRAINTS).then(stream => {\n          if (stream) {\n            setVideoList(currentList => currentList.filter((remoteVid) => remoteVid.socketId !== 'local'));\n            const videoProps = {src: stream, socketId: 'local'};\n            setVideoList(oldArray => [...oldArray, videoProps]);\n          }\n          input.current = audioCtx.createMediaStreamSource(stream);\n\n          input.current.connect(eqToCompressorPassthrough.current);\n          eqToCompressorPassthrough.current.connect(compressorToPitchshiftPassthrough.current);\n          compressorToPitchshiftPassthrough.current.connect(pitchshiftToReverbPassthrough.current);\n          pitchshiftToReverbPassthrough.current.connect(remoteAudioDestination.current);\n          pitchshiftToReverbPassthrough.current.connect(localOutputVolume.current);\n\n          equalizer.current =  new Equalizer(audioCtx);\n          compressor.current = new Compressor(audioCtx);\n          \n          pitchShifter.current =  new Jungle(audioCtx);\n          pitchShifter.current.setPitchOffset(pitchOffsetAmount);\n\n          reverberator.current =  new Reverb(audioCtx, 'MediumHall');\n          reverberator.current.setReverbPreset(reverbPreset);\n          reverberator.current.setReverbDryGain(reverbDryGain);\n          reverberator.current.setReverbWetGain(reverbWetGain);\n\n          var originalTrack = stream.getAudioTracks()[0];\n          stream.removeTrack(originalTrack);\n          var mixedTrack = mixAudioTracks(audioCtx, samplesDestination.current.stream, remoteAudioDestination.current.stream);\n          stream.addTrack(mixedTrack);\n          localStream.current = stream;\n          initSocketsAndPeers();\n        }).catch(e => alert(`getusermedia error ${e.name}`))\n      }\n    }\n    return () => { \n      if(localStream.current){\n        localStream.current.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n    };\n    \n  }, [audioCtx]);\n\n  useEffect(() => {\n    if(localOutputVolume.current && monitorGain){\n      localOutputVolume.current.gain.value = monitorGain;\n    }\n  }, [monitorGain, localOutputVolume.current]);\n\n  useEffect(() => {\n    if(localOutputVolume.current){\n      if(monitor){\n        localOutputVolume.current.connect(audioCtx.destination);\n      }\n      else {\n        localOutputVolume.current.disconnect();\n      }\n    }\n    \n  }, [monitor, localOutputVolume.current]);\n\n  useEffect(() => {\n    if (equalizer.current){\n      if(eq) {\n        input.current.disconnect(eqToCompressorPassthrough.current);\n        input.current.connect(equalizer.current.input);\n        equalizer.current.output.connect(eqToCompressorPassthrough.current);\n      }\n      else {\n        input.current.disconnect(equalizer.current.input);\n        equalizer.current.output.disconnect(eqToCompressorPassthrough.current);\n        input.current.connect(eqToCompressorPassthrough.current);\n      }\n    }\n  }, [eq]);\n\n  useEffect(() => {\n    if (compressor.current){\n      if(comp) {\n        eqToCompressorPassthrough.current.disconnect(compressorToPitchshiftPassthrough.current);\n        eqToCompressorPassthrough.current.connect(compressor.current.input);\n        compressor.current.output.connect(compressorToPitchshiftPassthrough.current);\n        compressor.current.setCompressorWetGain(compressorWetGain);\n        compressor.current.setCompressorDryGain(compressorDryGain);\n      }\n      else {\n        eqToCompressorPassthrough.current.disconnect(compressor.current.input);\n        compressor.current.output.disconnect(compressorToPitchshiftPassthrough.current);\n        eqToCompressorPassthrough.current.connect(compressorToPitchshiftPassthrough.current);\n      }\n    }\n  }, [comp]);\n\n  useEffect(() => {\n    if (pitchShifter.current){\n      if(pitchShift) {\n        compressorToPitchshiftPassthrough.current.disconnect(pitchshiftToReverbPassthrough.current);\n        compressorToPitchshiftPassthrough.current.connect(pitchShifter.current.input);\n        pitchShifter.current.output.connect(pitchshiftToReverbPassthrough.current);\n        pitchShifter.current.setJungleWetGain(pitchShiftWetGain);\n        pitchShifter.current.setJungleDryGain(pitchShiftDryGain);\n      }\n      else {\n        compressorToPitchshiftPassthrough.current.disconnect(pitchShifter.current.input);\n        pitchShifter.current.output.disconnect(pitchshiftToReverbPassthrough.current);\n        compressorToPitchshiftPassthrough.current.connect(pitchshiftToReverbPassthrough.current);\n      }\n    }\n  }, [pitchShift]);\n\n  useEffect(() => {\n    if(pitchShifter.current){\n      pitchShifter.current.setPitchOffset(pitchOffsetAmount);\n    }\n  }, [pitchOffsetAmount]);\n\n  useEffect(() => {\n    if (reverberator.current){\n      if(reverb) {\n        pitchshiftToReverbPassthrough.current.disconnect(remoteAudioDestination.current);\n        pitchshiftToReverbPassthrough.current.disconnect(localOutputVolume.current);\n        pitchshiftToReverbPassthrough.current.connect(reverberator.current.input);\n        reverberator.current.output.connect(remoteAudioDestination.current);\n        reverberator.current.output.connect(localOutputVolume.current);\n      }\n      else {\n        pitchshiftToReverbPassthrough.current.disconnect(reverberator.current.input);\n        reverberator.current.output.disconnect(remoteAudioDestination.current);\n        reverberator.current.output.disconnect(localOutputVolume.current);\n        pitchshiftToReverbPassthrough.current.connect(remoteAudioDestination.current);\n        pitchshiftToReverbPassthrough.current.connect(localOutputVolume.current);\n      }\n    }\n  }, [reverb]);\n\n  useEffect(() => {\n    if(reverberator.current){\n      reverberator.current.setReverbPreset(reverbPreset);\n    }\n  }, [reverbPreset]);\n\n  useEffect(() => {\n    if(reverberator.current){\n      reverberator.current.setReverbWetGain(reverbWetGain);\n    }\n  }, [reverbWetGain]);\n\n  useEffect(() => {\n    if(reverberator.current){\n      reverberator.current.setReverbDryGain(reverbDryGain);\n    }\n  }, [reverbDryGain]);\n\n  useEffect(() => {\n    if(pitchShifter.current){\n      pitchShifter.current.setJungleWetGain(pitchShiftWetGain);\n    }\n  }, [pitchShiftWetGain]);\n\n  useEffect(() => {\n    if(pitchShifter.current){\n      pitchShifter.current.setJungleDryGain(pitchShiftDryGain);\n    }\n  }, [pitchShiftDryGain]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorWetGain(compressorWetGain);\n    }\n  }, [compressorWetGain]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorDryGain(compressorDryGain);\n    }\n  }, [compressorDryGain]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorThreshold(compressorThreshold);\n    }\n  }, [compressorThreshold]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorKnee(compressorKnee);\n    }\n  }, [compressorKnee]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorRatio(compressorRatio);\n    }\n  }, [compressorRatio]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorAttack(compressorAttack);\n    }\n  }, [compressorAttack]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorRelease(compressorRelease);\n    }\n  }, [compressorRelease]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorDryGain(compressorDryGain);\n    }\n  }, [compressorDryGain]);\n\n  useEffect(() => {\n    if(compressor.current){\n      compressor.current.setCompressorDryGain(compressorDryGain);\n    }\n  }, [compressorDryGain]);\n\n  useEffect(() => {\n    if(samplesGain.current){\n      samplesGain.current.gain.value = samplesGainValue;\n    }\n  }, [samplesGainValue]);\n\n  async function initSamples() {\n    await loadSound('audio/laugh.wav', 'laugh');\n    await loadSound('audio/horn.wav', 'horn');\n    await loadSound('audio/whistle.wav', 'whistle');\n    await loadSound('audio/nooo.wav', 'nooo');\n  }\n\n  function loadSound(url, soundName) {\n    var request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = function() {\n        audioCtx.decodeAudioData(request.response,\n        function(decodedAudio) {\n            switch(soundName) {\n                case 'laugh':\n                    setLaughSoundBuffer(decodedAudio);\n                    break;\n                case 'horn':\n                    setHornSoundBuffer(decodedAudio);\n                    break;\n                case 'whistle':\n                    setWhistleSoundBuffer(decodedAudio);\n                    break;\n                case 'nooo':\n                    setNoooSoundBuffer(decodedAudio);\n                    break;\n            }\n        },\n        function() {\n            alert('error decoding file data: ' + url);\n        });\n    };\n    request.send();\n  }\n\n  function laugh() {\n    var laughSound = audioCtx.createBufferSource(); \n    laughSound.buffer = laughSoundBuffer;\n    if (samplesGain.current) {\n      laughSound.connect(samplesGain.current);\n      laughSound.start(0);\n    }\n  }\n  function whistle() {\n      var whistleSound = audioCtx.createBufferSource();\n      whistleSound.buffer = whistleSoundBuffer;\n      if (samplesGain.current) {\n          whistleSound.connect(samplesGain.current);\n          whistleSound.start(0);\n      }\n  }\n  function nooo() {\n      var noooSound = audioCtx.createBufferSource();\n      noooSound.buffer = noooSoundBuffer;\n      if (samplesGain.current) {\n          noooSound.connect(samplesGain.current);\n          noooSound.start(0);\n      }\n  }\n  function horn() {\n      var hornSound = audioCtx.createBufferSource();\n      hornSound.buffer = hornSoundBuffer;\n      if (samplesGain.current) {\n          hornSound.connect(samplesGain.current);\n          hornSound.start(0);\n      }\n  }\n\n  function userMediaAvailable() {\n    return !!( navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia );\n  }\n\n  function initSocketsAndPeers(){\n    setSocketComponent(<SocketsAndPeers handleVideoListAdd={handleVideoListAdd} handleVideoListRemove={handleVideoListRemove} localStream={localStream.current}/>)\n  }\n\n  function handleVideoListAdd(videoProps) {\n    setVideoList(oldArray => [...oldArray, videoProps]);\n  }\n\n  function handleVideoListRemove(socketId) {\n    setVideoList(currentList => currentList.filter((remoteVid) => remoteVid.socketId !== socketId));\n  }\n\n  function createVideo(props, numberOfVideos) {\n    return <VideoCard srcObject={props.src} socketId={props.socketId} key={props.socketId} numberOfVideos={numberOfVideos} />;\n  }\n\n  function createVideos() {\n    if(videoList?.length)\n      return videoList.map(props => {\n        return createVideo(props, videoList.length);\n      });\n  }\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleMonitorCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMonitor(event.target.checked);\n  };\n\n  const handleMonitorGainChange = (event: any, newValue: number | number[]) => {\n    setMonitorGain(newValue as number);\n  };\n\n  const handlePitchShiftCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPitchShift(event.target.checked);\n  };\n\n  const handlePitchOffsetChange = (event: any, newValue: number | number[]) => {\n    setPitchOffsetAmount(newValue as number);\n  };\n  const handlePitchShiftGainChange = (event: any, newValue: number | number[]) => {\n    setPitchShiftWetGain(newValue as number);\n    setPitchShiftDryGain(1.0 - newValue as number);\n  };\n\n  const handleReverbCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setReverb(event.target.checked);\n  };\n\n  const handleReverbGainChange = (event: any, newValue: number | number[]) => {\n    setReverbWetGain(newValue as number);\n    setReverbDryGain(1 - newValue as number);\n  };\n\n  const handleReverbPresetSelect = (event: React.ChangeEvent<{ value: string }>) => {\n    setReverbPreset(event.target.value);\n  };\n\n  const handleEqCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEq(event.target.checked);\n  };\n\n  const handleCompCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setComp(event.target.checked);\n  };\n\n  const handleCompressorGainChange = (event: any, newValue: number | number[]) => {\n    setCompressorWetGain(newValue as number);\n    setCompressorDryGain(1 - newValue as number);\n  };\n\n  const handleCompressorThresholdChange = (event: any, newValue: number | number[]) => {\n    setCompressorThreshold(newValue as number);\n  };\n\n  const handleCompressorKneeChange = (event: any, newValue: number | number[]) => {\n    setCompressorKnee(newValue as number);\n  };\n\n  const handleCompressorRatioChange = (event: any, newValue: number | number[]) => {\n    setCompressorRatio(newValue as number);\n  };\n\n  const handleCompressorAttackChange = (event: any, newValue: number | number[]) => {\n    setCompressorAttack(newValue as number);\n  };\n\n  const handleCompressorReleaseChange = (event: any, newValue: number | number[]) => {\n    setCompressorRelease(newValue as number);\n  };\n\n  const handleSamplesCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSamples(event.target.checked);\n  };\n\n  const handleSamplesGainChange = (event: any, newValue: number | number[]) => {\n    setSamplesGainValue(newValue as number);\n  };\n\n  return(\n    <div > \n        <IconButton\n          className={classes.settingsButton}\n          color=\"secondary\"\n          aria-label=\"open drawer\"\n          edge=\"end\"\n          onClick={handleDrawerOpen}\n        >\n          <GraphicEq />\n        </IconButton>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <Typography variant=\"h2\"\n          fontWeight='100'\n          color=\"primary\"\n          align=\"center\"\n          className={classes.title}>\n          Video Chat\n        </Typography>\n        <Grid container spacing={3}>\n          {createVideos()}\n        </Grid>\n      </main>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronRight />\n          </IconButton>\n          <h1>AUDIO</h1>\n        </div>\n        <Divider />\n        <div className={classes.drawerBody}>\n        <FormGroup row>\n          <FormControlLabel\n            control={   \n              <Checkbox\n                checked={monitor}\n                onChange={handleMonitorCheckbox}\n                color=\"secondary\"\n              /> \n            }\n            label='Monitor My Audio'\n          />\n        </FormGroup> \n        {monitor && <div>\n          <Slider \n            className={classes.slider}\n              padding={3} \n              value={monitorGain} \n              onChange={handleMonitorGainChange} \n              min={0.0} \n              max={1.0} \n              step={0.00000001}\n            /> \n          </div>\n        } \n        <FormGroup row>\n          <FormControlLabel\n            control={   \n              <Checkbox\n                checked={eq}\n                onChange={handleEqCheckbox}\n                color=\"secondary\"\n              /> \n            }\n            label='Equalizer'\n          />\n        </FormGroup> \n        { eq && \n          <div>\n            <Typography id=\"eq\" gutterBottom>\n              EQ\n            </Typography>\n            <Slider \n            className={classes.slider}\n              padding={3} \n              value={pitchOffsetAmount} \n              onChange={handlePitchOffsetChange} \n              min={-1.5} \n              max={1.5} \n              step={0.01}\n              aria-labelledby=\"eq\"\n            /> \n          </div>\n        }\n        <FormGroup row>\n          <FormControlLabel\n            control={   \n              <Checkbox\n                checked={comp}\n                onChange={handleCompCheckbox}\n                color=\"secondary\"\n              /> \n            }\n            label='Compressor'\n          />\n        </FormGroup> \n        { comp && \n          <div>\n            <Typography id=\"compressorGain\" gutterBottom>\n              Dry - Wet\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={compressorWetGain} \n              onChange={handleCompressorGainChange} \n              min={0} \n              max={1.0} \n              step={0.00001}\n              aria-labelledby=\"compressorGain\"\n            />\n            <Typography id=\"compressorThreshold\" gutterBottom>\n              Threshold\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={compressorThreshold} \n              onChange={handleCompressorThresholdChange} \n              min={-100} \n              max={0} \n              step={0.1}\n              aria-labelledby=\"compressorThreshold\"\n            />  \n            <Typography id=\"compressorKnee\" gutterBottom>\n              Knee\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={compressorKnee} \n              onChange={handleCompressorKneeChange} \n              min={0} \n              max={40} \n              step={0.1}\n              aria-labelledby=\"compressorKnee\"\n            />  \n            <Typography id=\"compressorRatio\" gutterBottom>\n              Ratio\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={compressorRatio} \n              onChange={handleCompressorRatioChange} \n              min={1} \n              max={20} \n              step={0.1}\n              aria-labelledby=\"compressorRatio\"\n            />  \n            <Typography id=\"compressorAttack\" gutterBottom>\n              Attack\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={compressorAttack} \n              onChange={handleCompressorAttackChange} \n              min={0} \n              max={1.0} \n              step={0.00001}\n              aria-labelledby=\"compressorAttack\"\n            />  \n            <Typography id=\"compressorRelease\" gutterBottom>\n              Release\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={compressorRelease} \n              onChange={handleCompressorReleaseChange} \n              min={0} \n              max={1.0} \n              step={0.00001}\n              aria-labelledby=\"compressorRelease\"\n            />  \n          </div>\n        }\n        <FormGroup row>\n          <FormControlLabel\n            control={   \n              <Checkbox\n                checked={pitchShift}\n                onChange={handlePitchShiftCheckbox}\n                color=\"secondary\"\n              /> \n            }\n            label='Pitch Shifter'\n          />\n        </FormGroup> \n        { pitchShift && \n          <div>\n            <Typography id=\"pitch\" gutterBottom>\n              Pitch ({pitchOffsetAmount})\n            </Typography>\n            <Slider \n            className={classes.slider}\n              padding={3} \n              value={pitchOffsetAmount} \n              onChange={handlePitchOffsetChange} \n              min={-1.5} \n              max={1.5} \n              step={0.01}\n              aria-labelledby=\"pitch\"\n            /> \n            <Typography id=\"pitch-shift-gain\" gutterBottom>\n              Dry - Wet\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={pitchShiftWetGain} \n              onChange={handlePitchShiftGainChange} \n              min={0.0} \n              max={1.0} \n              step={0.00000001}\n              aria-labelledby=\"pitch-shift-gain\"\n            /> \n          </div>\n        }\n        <FormGroup row>\n          <FormControlLabel\n            control={   \n              <Checkbox\n                checked={reverb}\n                onChange={handleReverbCheckbox}\n                color=\"secondary\"\n              /> \n            }\n            label='Reverb'\n          />\n        </FormGroup> \n        { reverb && \n          <div>\n            <Typography gutterBottom>\n              Preset\n            </Typography>\n            <FormControl className={classes.select}>\n              <Select\n              variant=\"outlined\"\n                value={reverbPreset}\n                onChange={handleReverbPresetSelect}\n              >\n                {REVERB_PRESET_LIST.map((preset) => (\n                  <MenuItem key={preset} value={preset}>\n                    {preset}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Typography id=\"reverb-wet\" gutterBottom>\n              Dry - Wet\n            </Typography>\n            <Slider \n              className={classes.slider}\n              padding={3} \n              value={reverbWetGain} \n              onChange={handleReverbGainChange} \n              min={0.0} \n              max={1.0} \n              step={0.00000001}\n              aria-labelledby=\"reverb-wet\"\n            /> \n          </div>\n        }\n        <FormGroup row>\n          <FormControlLabel\n            control={   \n              <Checkbox\n                checked={samples}\n                onChange={handleSamplesCheckbox}\n                color=\"secondary\"\n              /> \n            }\n            label='Samples'\n          />\n        </FormGroup> \n        { samples && <div>\n          <Typography id=\"samples-gain\" gutterBottom>\n            Volume\n          </Typography>\n          <Slider \n          className={classes.slider}\n            padding={3} \n            value={samplesGainValue} \n            onChange={handleSamplesGainChange}\n            max={1.0} \n            step={0.00000001}\n            aria-labelledby=\"samples-gain\"\n          /> \n            <Button variant=\"outlined\" id='laugh' onClick={laugh}>\n              Laugh\n            </Button>\n            <Button variant=\"outlined\" id='nooo' onClick={nooo}>\n              Nooo\n            </Button>\n            <Button variant=\"outlined\" id='horn' onClick={horn}>\n              Horn\n            </Button>\n            <Button variant=\"outlined\" id='whistle' onClick={whistle}>\n              Whistle\n            \n            </Button>\n          </div>\n        }\n        </div>\n        </Drawer>\n        {socketComponent}\n    </div>\n  );\n}","/var/singysongy/singysongy/client/src/Components/Home/Home.tsx",["103","104","105","106","107","108"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Icon from \"@material-ui/core/Icon\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Button from \"@material-ui/core/Button\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\n\nimport { Link } from \"react-router-dom\";\nimport './Home.css';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n);\n\nexport default function Home() {\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"Home\">\n      <header className=\"Home-header\">\n        <h1>\n          SingySongy\n        </h1>\n        <List component=\"nav\" className={classes.root} aria-label=\"contacts\">\n          <ListItem button component={Link} to=\"/videoChatEffects\">\n            <ListItemText secondary=\"Default Singy Songy Room - USE HEADPHONES!\" />\n          </ListItem>\n        </List>\n      </header>\n    </div>\n  );\n}\n","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/audioUtils.ts",[],"/var/singysongy/singysongy/client/src/Components/VideoChatEffects/reverb.js",[],"/var/singysongy/singysongy/client/src/Components/VideoChatEffects/jungle.js",["109","110","111"],"// Copyright 2012, Google Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nfunction createFadeBuffer(context, activeTime, fadeTime) {\n    var length1 = activeTime * context.sampleRate;\n    var length2 = (activeTime - 2*fadeTime) * context.sampleRate;\n    var length = length1 + length2;\n    var buffer = context.createBuffer(1, length, context.sampleRate);\n    var p = buffer.getChannelData(0);\n\n    var fadeLength = fadeTime * context.sampleRate;\n\n    var fadeIndex1 = fadeLength;\n    var fadeIndex2 = length1 - fadeLength;\n\n    // 1st part of cycle\n    for (var i = 0; i < length1; ++i) {\n        var value;\n\n        if (i < fadeIndex1) {\n            value = Math.sqrt(i / fadeLength);\n        } else if (i >= fadeIndex2) {\n            value = Math.sqrt(1 - (i - fadeIndex2) / fadeLength);\n        } else {\n            value = 1;\n        }\n\n        p[i] = value;\n    }\n\n    // 2nd part\n    for (var i = length1; i < length; ++i) {\n        p[i] = 0;\n    }\n\n\n    return buffer;\n}\n\nfunction createDelayTimeBuffer(context, activeTime, fadeTime, shiftUp) {\n    var length1 = activeTime * context.sampleRate;\n    var length2 = (activeTime - 2*fadeTime) * context.sampleRate;\n    var length = length1 + length2;\n    var buffer = context.createBuffer(1, length, context.sampleRate);\n    var p = buffer.getChannelData(0);\n\n    // 1st part of cycle\n    for (var i = 0; i < length1; ++i) {\n        if (shiftUp)\n          // This line does shift-up transpose\n          p[i] = (length1-i)/length;\n        else\n          // This line does shift-down transpose\n          p[i] = i / length1;\n    }\n\n    // 2nd part\n    for (var i = length1; i < length; ++i) {\n        p[i] = 0;\n    }\n\n    return buffer;\n}\n\nvar delayTime = 0.100;\nvar fadeTime = 0.050;\nvar bufferTime = 0.100;\n\nexport default function Jungle(context) {\n\n    this.context = context;\n    // Create nodes for the input and output of this \"module\".\n    var input = context.createGain();\n    var output = context.createGain();\n    this.input = input;\n    this.output = output;\n\n    let dryGain = context.createGain();\n    let wetGain = context.createGain();\n\n    this.dry_gain = dryGain;\n    this.dry_gain.gain.value = 0.0;\n    this.wet_gain = wetGain;\n    this.wet_gain.gain.value = 0.0;\n\n    input.connect(dryGain);\n    dryGain.connect(output);\n    wetGain.connect(output);\n\n    // Delay modulation.\n    var mod1 = context.createBufferSource();\n    var mod2 = context.createBufferSource();\n    var mod3 = context.createBufferSource();\n    var mod4 = context.createBufferSource();\n    this.shiftDownBuffer = createDelayTimeBuffer(context, bufferTime, fadeTime, false);\n    this.shiftUpBuffer = createDelayTimeBuffer(context, bufferTime, fadeTime, true);\n    mod1.buffer = this.shiftDownBuffer;\n    mod2.buffer = this.shiftDownBuffer;\n    mod3.buffer = this.shiftUpBuffer;\n    mod4.buffer = this.shiftUpBuffer;\n    mod1.loop = true;\n    mod2.loop = true;\n    mod3.loop = true;\n    mod4.loop = true;\n\n    // for switching between oct-up and oct-down\n    var mod1Gain = context.createGain();\n    var mod2Gain = context.createGain();\n    var mod3Gain = context.createGain();\n    mod3Gain.gain.value = 0;\n    var mod4Gain = context.createGain();\n    mod4Gain.gain.value = 0;\n\n    mod1.connect(mod1Gain);\n    mod2.connect(mod2Gain);\n    mod3.connect(mod3Gain);\n    mod4.connect(mod4Gain);\n\n    // Delay amount for changing pitch.\n    var modGain1 = context.createGain();\n    var modGain2 = context.createGain();\n\n    var delay1 = context.createDelay();\n    var delay2 = context.createDelay();\n    mod1Gain.connect(modGain1);\n    mod2Gain.connect(modGain2);\n    mod3Gain.connect(modGain1);\n    mod4Gain.connect(modGain2);\n    modGain1.connect(delay1.delayTime);\n    modGain2.connect(delay2.delayTime);\n\n    // Crossfading.\n    var fade1 = context.createBufferSource();\n    var fade2 = context.createBufferSource();\n    var fadeBuffer = createFadeBuffer(context, bufferTime, fadeTime);\n    fade1.buffer = fadeBuffer\n    fade2.buffer = fadeBuffer;\n    fade1.loop = true;\n    fade2.loop = true;\n\n    var mix1 = context.createGain();\n    var mix2 = context.createGain();\n    mix1.gain.value = 0;\n    mix2.gain.value = 0;\n\n    fade1.connect(mix1.gain);\n    fade2.connect(mix2.gain);\n\n    // Connect processing graph.\n    input.connect(delay1);\n    input.connect(delay2);\n    delay1.connect(mix1);\n    delay2.connect(mix2);\n    mix1.connect(wetGain);\n    mix2.connect(wetGain);\n\n    // Start\n    var t = context.currentTime + 0.050;\n    var t2 = t + bufferTime - fadeTime;\n    mod1.start(t);\n    mod2.start(t2);\n    mod3.start(t);\n    mod4.start(t2);\n    fade1.start(t);\n    fade2.start(t2);\n\n    this.mod1 = mod1;\n    this.mod2 = mod2;\n    this.mod1Gain = mod1Gain;\n    this.mod2Gain = mod2Gain;\n    this.mod3Gain = mod3Gain;\n    this.mod4Gain = mod4Gain;\n    this.modGain1 = modGain1;\n    this.modGain2 = modGain2;\n    this.fade1 = fade1;\n    this.fade2 = fade2;\n    this.mix1 = mix1;\n    this.mix2 = mix2;\n    this.delay1 = delay1;\n    this.delay2 = delay2;\n\n    this.setDelay(delayTime);\n}\n\nJungle.prototype.setDelay = function(delayTime) {\n    this.modGain1.gain.setTargetAtTime(0.5*delayTime, 0, 0.010);\n    this.modGain2.gain.setTargetAtTime(0.5*delayTime, 0, 0.010);\n}\n\nvar previousPitch = -1;\n\nJungle.prototype.setPitchOffset = function(mult) {\n        if (mult>0) { // pitch up\n            this.mod1Gain.gain.value = 0;\n            this.mod2Gain.gain.value = 0;\n            this.mod3Gain.gain.value = 1;\n            this.mod4Gain.gain.value = 1;\n        } else { // pitch down\n            this.mod1Gain.gain.value = 1;\n            this.mod2Gain.gain.value = 1;\n            this.mod3Gain.gain.value = 0;\n            this.mod4Gain.gain.value = 0;\n        }\n        this.setDelay(delayTime*Math.abs(mult));\n    previousPitch = mult;\n}\n\nJungle.prototype.setJungleDryGain = function(gainValue) {\n    this.dry_gain.gain.value = gainValue;\n}\n\nJungle.prototype.setJungleWetGain = function(gainValue) {\n    this.wet_gain.gain.value = gainValue;\n}\n\n\n","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/VideoCard.tsx",[],"/var/singysongy/singysongy/client/src/Components/VideoChatEffects/constants.tsx",[],"/var/singysongy/singysongy/client/src/Components/VideoChatEffects/SocketsAndPeers.tsx",["112","113"],"import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport SimplePeer from 'simple-peer';\nimport { ICE_CONFIGURATION, SOCKET_URL } from './constants';\n\nexport default function SocketsAndPeers({localStream, handleVideoListAdd, handleVideoListRemove}) {\n  \n  const socket = io(SOCKET_URL);\n  \n  const peers = {};\n  useEffect(() => {\n    initSockets();\n    return function cleanup() {\n      socket.disconnect();\n    };\n  }, []);\n\n  function initSockets() {\n\n    console.log('init sockets and peers');\n    socket.on('connect', () => {\n      console.log('I AM ', socket.id);\n      socket.emit('subscribe', { room: 'aivxRoom', socketId: socket.id });\n    });\n  \n    socket.on('initReceive', socket_id => {\n      console.log('INIT RECEIVE ' + socket_id)  \n      addPeer(socket_id, false)\n    });\n  \n    socket.on('initSend', data => {\n      console.log('INIT SEND RECEIVED from ' + JSON.stringify(data))\n      addPeer(data, true)\n    });\n\n    socket.on('signal', data => {\n      peers[data.socket_id].signal(data.signal)\n    });\n  \n    socket.on('removePeer', socket_id => {\n      console.log('removing peer ' + socket_id);\n      removePeer(socket_id);\n    })\n  \n    socket.on('disconnect', () => {\n      console.log('GOT DISCONNECTED')\n      for (let socket_id in peers) {\n        removePeer(socket_id);\n      }\n    });\n  }\n\n  const addPeer = async function (socket_id: String, am_initiator: Boolean) {\n      console.log('add peer ' + socket_id + ' initiator? ' + am_initiator);\n      peers[socket_id] = await new SimplePeer({\n          initiator: am_initiator,\n          stream: localStream,\n          config: ICE_CONFIGURATION\n      });\n  \n      if (am_initiator === false) {\n        socket.emit('initSend', socket_id);\n      }\n      \n      peers[socket_id].on('signal', data => {\n        socket.emit('signal', {\n          signal: data,\n          socket_id: socket_id\n        })\n      })\n  \n      peers[socket_id].on('stream', stream => {\n        const videoProps = {src: stream, socketId: socket_id};\n        handleVideoListAdd(videoProps);\n      })\n  }\n  \n  function removePeer(socket_id: String) {\n    handleVideoListRemove(socket_id);\n    if (peers[socket_id]) peers[socket_id].destroy();\n    delete peers[socket_id];\n  }\n    \n  return <div></div>;\n      \n}","/var/singysongy/singysongy/client/src/Components/VideoChatEffects/eq.js",[],"/var/singysongy/singysongy/client/src/Components/VideoChatEffects/compressor.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":18},{"ruleId":"118","severity":1,"message":"122","line":18,"column":8,"nodeType":"120","messageId":"121","endLine":18,"endColumn":20},{"ruleId":"118","severity":1,"message":"123","line":105,"column":9,"nodeType":"120","messageId":"121","endLine":105,"endColumn":14},{"ruleId":"118","severity":1,"message":"124","line":136,"column":10,"nodeType":"120","messageId":"121","endLine":136,"endColumn":19},{"ruleId":"118","severity":1,"message":"125","line":136,"column":21,"nodeType":"120","messageId":"121","endLine":136,"endColumn":33},{"ruleId":"118","severity":1,"message":"126","line":137,"column":10,"nodeType":"120","messageId":"121","endLine":137,"endColumn":22},{"ruleId":"118","severity":1,"message":"127","line":137,"column":24,"nodeType":"120","messageId":"121","endLine":137,"endColumn":39},{"ruleId":"118","severity":1,"message":"128","line":138,"column":10,"nodeType":"120","messageId":"121","endLine":138,"endColumn":19},{"ruleId":"118","severity":1,"message":"129","line":138,"column":21,"nodeType":"120","messageId":"121","endLine":138,"endColumn":33},{"ruleId":"118","severity":1,"message":"130","line":139,"column":10,"nodeType":"120","messageId":"121","endLine":139,"endColumn":23},{"ruleId":"118","severity":1,"message":"131","line":139,"column":25,"nodeType":"120","messageId":"121","endLine":139,"endColumn":41},{"ruleId":"118","severity":1,"message":"132","line":140,"column":10,"nodeType":"120","messageId":"121","endLine":140,"endColumn":20},{"ruleId":"118","severity":1,"message":"133","line":140,"column":22,"nodeType":"120","messageId":"121","endLine":140,"endColumn":35},{"ruleId":"118","severity":1,"message":"134","line":141,"column":10,"nodeType":"120","messageId":"121","endLine":141,"endColumn":22},{"ruleId":"118","severity":1,"message":"135","line":141,"column":24,"nodeType":"120","messageId":"121","endLine":141,"endColumn":39},{"ruleId":"118","severity":1,"message":"136","line":142,"column":10,"nodeType":"120","messageId":"121","endLine":142,"endColumn":21},{"ruleId":"118","severity":1,"message":"137","line":142,"column":23,"nodeType":"120","messageId":"121","endLine":142,"endColumn":37},{"ruleId":"118","severity":1,"message":"138","line":143,"column":10,"nodeType":"120","messageId":"121","endLine":143,"endColumn":24},{"ruleId":"118","severity":1,"message":"139","line":143,"column":26,"nodeType":"120","messageId":"121","endLine":143,"endColumn":43},{"ruleId":"118","severity":1,"message":"140","line":144,"column":10,"nodeType":"120","messageId":"121","endLine":144,"endColumn":21},{"ruleId":"118","severity":1,"message":"141","line":144,"column":23,"nodeType":"120","messageId":"121","endLine":144,"endColumn":37},{"ruleId":"118","severity":1,"message":"142","line":145,"column":10,"nodeType":"120","messageId":"121","endLine":145,"endColumn":25},{"ruleId":"118","severity":1,"message":"143","line":145,"column":27,"nodeType":"120","messageId":"121","endLine":145,"endColumn":45},{"ruleId":"118","severity":1,"message":"144","line":146,"column":10,"nodeType":"120","messageId":"121","endLine":146,"endColumn":22},{"ruleId":"118","severity":1,"message":"145","line":146,"column":24,"nodeType":"120","messageId":"121","endLine":146,"endColumn":39},{"ruleId":"146","severity":1,"message":"147","line":174,"column":6,"nodeType":"148","endLine":174,"endColumn":8,"suggestions":"149"},{"ruleId":"146","severity":1,"message":"150","line":235,"column":6,"nodeType":"148","endLine":235,"endColumn":16,"suggestions":"151"},{"ruleId":"146","severity":1,"message":"152","line":241,"column":6,"nodeType":"148","endLine":241,"endColumn":46,"suggestions":"153"},{"ruleId":"146","severity":1,"message":"154","line":253,"column":6,"nodeType":"148","endLine":253,"endColumn":42,"suggestions":"155"},{"ruleId":"146","severity":1,"message":"156","line":285,"column":6,"nodeType":"148","endLine":285,"endColumn":12,"suggestions":"157"},{"ruleId":"146","severity":1,"message":"158","line":302,"column":6,"nodeType":"148","endLine":302,"endColumn":18,"suggestions":"159"},{"ruleId":"118","severity":1,"message":"160","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":17},{"ruleId":"118","severity":1,"message":"161","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":15},{"ruleId":"118","severity":1,"message":"162","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":12},{"ruleId":"118","severity":1,"message":"163","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":18},{"ruleId":"118","severity":1,"message":"164","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":14},{"ruleId":"118","severity":1,"message":"165","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":20},{"ruleId":"166","severity":1,"message":"167","line":58,"column":14,"nodeType":"120","messageId":"168","endLine":58,"endColumn":15},{"ruleId":"166","severity":1,"message":"167","line":84,"column":14,"nodeType":"120","messageId":"168","endLine":84,"endColumn":15},{"ruleId":"169","severity":1,"message":"170","line":231,"column":5,"nodeType":"120","messageId":"121","endLine":231,"endColumn":18},{"ruleId":"118","severity":1,"message":"171","line":1,"column":28,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"146","severity":1,"message":"172","line":16,"column":6,"nodeType":"148","endLine":16,"endColumn":8,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"@typescript-eslint/no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","'SettingsIcon' is defined but never used.","'theme' is assigned a value but never used.","'lowEQGain' is assigned a value but never used.","'setLowEQGain' is assigned a value but never used.","'lowMidEQGain' is assigned a value but never used.","'setLowMidEQGain' is assigned a value but never used.","'midEQGain' is assigned a value but never used.","'setMidEQGain' is assigned a value but never used.","'highMidEQGain' is assigned a value but never used.","'setHighMidEQGain' is assigned a value but never used.","'highEQGain' is assigned a value but never used.","'setHighEQGain' is assigned a value but never used.","'highEQFilter' is assigned a value but never used.","'setHighEQFilter' is assigned a value but never used.","'lowEQSlider' is assigned a value but never used.","'setLowEQSlider' is assigned a value but never used.","'lowMidEQSlider' is assigned a value but never used.","'setLowMidEQSlider' is assigned a value but never used.","'midEQSlider' is assigned a value but never used.","'setMidEQSlider' is assigned a value but never used.","'highMidEQSlider' is assigned a value but never used.","'setHighMidEQSlider' is assigned a value but never used.","'highEQSlider' is assigned a value but never used.","'setHighEQSlider' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AudioContext' and 'audioCtx'. Either include them or remove the dependency array.","ArrayExpression",["176"],"React Hook useEffect has missing dependencies: 'initSamples', 'initSocketsAndPeers', 'monitorGain', 'pitchOffsetAmount', 'reverbDryGain', 'reverbPreset', 'reverbWetGain', and 'samplesGainValue'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has an unnecessary dependency: 'localOutputVolume.current'. Either exclude it or remove the dependency array. Mutable values like 'localOutputVolume.current' aren't valid dependencies because mutating them doesn't re-render the component.",["178"],"React Hook useEffect has a missing dependency: 'audioCtx.destination'. Either include it or remove the dependency array. Mutable values like 'localOutputVolume.current' aren't valid dependencies because mutating them doesn't re-render the component.",["179"],"React Hook useEffect has missing dependencies: 'compressorDryGain' and 'compressorWetGain'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'pitchShiftDryGain' and 'pitchShiftWetGain'. Either include them or remove the dependency array.",["181"],"'PropTypes' is defined but never used.","'AddIcon' is defined but never used.","'Icon' is defined but never used.","'DeleteIcon' is defined but never used.","'Button' is defined but never used.","'ListItemIcon' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","no-unused-vars","'previousPitch' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'initSockets' and 'socket'. Either include them or remove the dependency array.",["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [AudioContext, audioCtx]",{"range":"197","text":"198"},"Update the dependencies array to be: [audioCtx, initSamples, initSocketsAndPeers, monitorGain, pitchOffsetAmount, reverbDryGain, reverbPreset, reverbWetGain, samplesGainValue]",{"range":"199","text":"200"},"Update the dependencies array to be: [monitorGain]",{"range":"201","text":"202"},"Update the dependencies array to be: [monitor, audioCtx.destination]",{"range":"203","text":"204"},"Update the dependencies array to be: [comp, compressorDryGain, compressorWetGain]",{"range":"205","text":"206"},"Update the dependencies array to be: [pitchShift, pitchShiftDryGain, pitchShiftWetGain]",{"range":"207","text":"208"},"Update the dependencies array to be: [initSockets, socket]",{"range":"209","text":"210"},[6098,6100],"[AudioContext, audioCtx]",[8883,8893],"[audioCtx, initSamples, initSocketsAndPeers, monitorGain, pitchOffsetAmount, reverbDryGain, reverbPreset, reverbWetGain, samplesGainValue]",[9036,9076],"[monitorGain]",[9312,9348],"[monitor, audioCtx.destination]",[10635,10641],"[comp, compressorDryGain, compressorWetGain]",[11438,11450],"[pitchShift, pitchShiftDryGain, pitchShiftWetGain]",[456,458],"[initSockets, socket]"]